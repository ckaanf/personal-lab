/*
gRPC 서비스 정의
1) .proto파일은 src/main/proto 경로 아래 작성해줍니다.
2) .proto파일 작성 후 build Task를 실행시켜줍니다.
3) .proto파일에 정의한 서비스에 대하여 Java언어로 소스코드가 자동 생성됩니다.
4) 생성된 자바 소스코드는 build/classes/generated/source/proto/main 아래 생성됩니다.
 */

syntax = "proto3";

/*
java_multiple_files (default value: false)
- false일 경우 .proto 파일로 생성될 클래스 파일이 하나로 생성됨
- true일 경우 .proto 파일로 생성될 클래스 파일이 나뉘어 생성됨
 */
option java_multiple_files = true;
option java_package = "com.example.grpc";  // .proto 파일로 생성될 클래스 파일이 위치할 패키지명
option java_outer_classname = "HelloProto";  // .proto 파일로 생성될 클래스 파일명


/*
통신할 서비스를 정의합니다.
- gRPC 종류: https://grpc.io/docs/what-is-grpc/core-concepts/#rpc-life-cycle
 */
service Hello {
  rpc SayHello (HelloRequest) returns (HelloResponse);  // Unary RPC (단방향 RPC)
  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);  // Server streaming RPC (서버 스트리밍 RPC)
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);  // Client streaming RPC (클라이언트 스트리밍 RPC)
  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);  // Bidirectional streaming RPC (양방향 스트리밍 RPC)
}

/*
요청 메시지 정의 (클라이언트 -> 서버)
 */
message HelloRequest {
  string name = 1;      // 이름
  int32 age = 2;        // 나이
  string message = 3;   // 하고 싶은 말 메시지
}

/*
응답 메시지 정의 (서버 -> 클라이언트)
 */
message HelloResponse {
  string greeting_message = 1;  // 인사 메시지
  string question_message = 2;  // 질문 메시지
}